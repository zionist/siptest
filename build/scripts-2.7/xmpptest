#!/tmp/env/bin/python
import logging
import sys
from multiprocessing import Process
from xmpptest.client import Sender, Receiver
from optparse import OptionParser


if __name__ == '__main__':
    usage = "usage: %prog -f <testfile> [options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    optp.add_option('-d', '--debug', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=logging.DEBUG, default=logging.INFO)
    optp.add_option('-v', '--verbose', help='set logging to COMM',
                    action='store_const', dest='loglevel',
                    const=5, default=logging.INFO)
    optp.add_option('-f', '--file',
                    help='file with MSISDN:pass= format',
                    dest='filename')
    optp.add_option('-w', '--workers',
                    help='workers count',
                    dest='workers', default=1)

    opts, args = optp.parse_args()
    logging.basicConfig(level=opts.loglevel,
                        format='%(levelname)-8s %(message)s')
    # JID and password options.
    # optp.add_option("-j", "--jid", dest="jid",
    # help="JID to use")

    if not opts.filename:
        print("Please specify the filename for tests")
        sys.exit(1)

    try:
        int(opts.workers)
    except Exception as e:
        print("Wrong workers value")
        print(e)

    user_file_data = ""
    try:
        with open(opts.filename, 'r') as user_file:
            user_file_data = user_file.readlines()
            # parse file
    except (FileExistsError, FileNotFoundError) as e:
        print("Can't read file %s" % opts.filename)
        print(e)

    # parse file
    users = {}
    for line in user_file_data:
        (msisdn, password) = line.rstrip().split(":")
        users.update({msisdn: password})

    # distribute senders and receivers to workers
    senders = []
    receivers = []
    is_receiver = True
    for msisdn, password in users.items():
        if is_receiver:
            receivers.append(Receiver(msisdn, password))
            is_receiver = not is_receiver
        else:
            senders.append(Sender(msisdn, password, receivers[-1].msisdn,
                                  "test mmsg"))
            is_receiver = not is_receiver

    if len(senders) != len(receivers):
        print("Please check file %s. Count of lines must be even")
        sys.exit(1)

    # run clients in separate processes
    def run(client):
        if client.connect():
            client.process(block=False)


    senders_per_worker = int(len(senders) / opts.workers)
    receivers_per_worker = int(len(receivers) / opts.workers)

    procs = []
    for _junk in range(opts.workers):
        for __junk in range(senders_per_worker):
            # run(senders.pop())
            proc = Process(target=run, args=(senders.pop(),))
            procs.append(proc)
        for __junk in range(receivers_per_worker):
            # run(receivers.pop())
            proc = Process(target=run, args=(receivers.pop(),))
            procs.append(proc)

    import time
    #for proc in procs:
    #    proc.daemon = True
    #    proc.start()
    #time.sleep(10)
    #for proc in procs:
    #    proc.join()

    procs = []
    def test_run_1(_junk):
        receiver = Receiver("79152070050",
                            "kVUc/Dh7jLllEAsZ95uHW2OA65c=")
        if receiver.connect():
            receiver.process(block=False)
            print("Done")
        else:
            print("Unable to connect.")
    proc = Process(target=test_run_1, args=(receivers, ))
    procs.append(proc)

    for proc in procs:
        proc.daemon = True
        proc.start()
    for proc in procs:
        proc.join(timeout=10000)







    # Count threads




    #receiver = Receiver("79152070050",
    #                    "kVUc/Dh7jLllEAsZ95uHW2OA65c=")
    #
    #sender = Sender("79152070060", "Yi+EXDdBTTqQPw0643zL4yq7W5w=",
    #               "79152070050", "test drive")

    #if sender.connect():
    #    sender.process(block=False)
    #    print("Done")
    #else:
    #    print("Unable to connect.")

    #if receiver.connect():
    #    receiver.process(block=False)
    #    print("Done")
    #else:
    #    print("Unable to connect.")

